// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "gojiko api": Application User Types
//
// Command:
// $ goagen
// --design=github.com/craftone/gojiko/goa/design
// --out=$(GOPATH)/src/github.com/craftone/gojiko/goa
// --version=v1.3.0

package app

import (
	"github.com/goadesign/goa"
)

// fteid user type.
type fteid struct {
	Ipv4 *string `form:"ipv4,omitempty" json:"ipv4,omitempty" xml:"ipv4,omitempty"`
	Teid *string `form:"teid,omitempty" json:"teid,omitempty" xml:"teid,omitempty"`
}

// Validate validates the fteid type instance.
func (ut *fteid) Validate() (err error) {
	if ut.Teid == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "teid"))
	}
	if ut.Ipv4 == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`request`, "ipv4"))
	}
	if ut.Ipv4 != nil {
		if err2 := goa.ValidateFormat(goa.FormatIPv4, *ut.Ipv4); err2 != nil {
			err = goa.MergeErrors(err, goa.InvalidFormatError(`request.ipv4`, *ut.Ipv4, goa.FormatIPv4, err2))
		}
	}
	if ut.Teid != nil {
		if ok := goa.ValidatePattern(`^0x[0-9A-F]{8}$`, *ut.Teid); !ok {
			err = goa.MergeErrors(err, goa.InvalidPatternError(`request.teid`, *ut.Teid, `^0x[0-9A-F]{8}$`))
		}
	}
	return
}

// Publicize creates Fteid from fteid
func (ut *fteid) Publicize() *Fteid {
	var pub Fteid
	if ut.Ipv4 != nil {
		pub.Ipv4 = *ut.Ipv4
	}
	if ut.Teid != nil {
		pub.Teid = *ut.Teid
	}
	return &pub
}

// Fteid user type.
type Fteid struct {
	Ipv4 string `form:"ipv4" json:"ipv4" xml:"ipv4"`
	Teid string `form:"teid" json:"teid" xml:"teid"`
}

// Validate validates the Fteid type instance.
func (ut *Fteid) Validate() (err error) {
	if ut.Teid == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "teid"))
	}
	if ut.Ipv4 == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`type`, "ipv4"))
	}
	if err2 := goa.ValidateFormat(goa.FormatIPv4, ut.Ipv4); err2 != nil {
		err = goa.MergeErrors(err, goa.InvalidFormatError(`type.ipv4`, ut.Ipv4, goa.FormatIPv4, err2))
	}
	if ok := goa.ValidatePattern(`^0x[0-9A-F]{8}$`, ut.Teid); !ok {
		err = goa.MergeErrors(err, goa.InvalidPatternError(`type.teid`, ut.Teid, `^0x[0-9A-F]{8}$`))
	}
	return
}

// gtpSessionFTEIDs user type.
type gtpSessionFTEIDs struct {
	PgwCtrlFTEID *fteid `form:"pgwCtrlFTEID,omitempty" json:"pgwCtrlFTEID,omitempty" xml:"pgwCtrlFTEID,omitempty"`
	PgwDataFTEID *fteid `form:"pgwDataFTEID,omitempty" json:"pgwDataFTEID,omitempty" xml:"pgwDataFTEID,omitempty"`
	SgwCtrlFTEID *fteid `form:"sgwCtrlFTEID,omitempty" json:"sgwCtrlFTEID,omitempty" xml:"sgwCtrlFTEID,omitempty"`
	SgwDataFTEID *fteid `form:"sgwDataFTEID,omitempty" json:"sgwDataFTEID,omitempty" xml:"sgwDataFTEID,omitempty"`
}

// Validate validates the gtpSessionFTEIDs type instance.
func (ut *gtpSessionFTEIDs) Validate() (err error) {
	if ut.PgwCtrlFTEID != nil {
		if err2 := ut.PgwCtrlFTEID.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if ut.PgwDataFTEID != nil {
		if err2 := ut.PgwDataFTEID.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if ut.SgwCtrlFTEID != nil {
		if err2 := ut.SgwCtrlFTEID.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if ut.SgwDataFTEID != nil {
		if err2 := ut.SgwDataFTEID.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates GtpSessionFTEIDs from gtpSessionFTEIDs
func (ut *gtpSessionFTEIDs) Publicize() *GtpSessionFTEIDs {
	var pub GtpSessionFTEIDs
	if ut.PgwCtrlFTEID != nil {
		pub.PgwCtrlFTEID = ut.PgwCtrlFTEID.Publicize()
	}
	if ut.PgwDataFTEID != nil {
		pub.PgwDataFTEID = ut.PgwDataFTEID.Publicize()
	}
	if ut.SgwCtrlFTEID != nil {
		pub.SgwCtrlFTEID = ut.SgwCtrlFTEID.Publicize()
	}
	if ut.SgwDataFTEID != nil {
		pub.SgwDataFTEID = ut.SgwDataFTEID.Publicize()
	}
	return &pub
}

// GtpSessionFTEIDs user type.
type GtpSessionFTEIDs struct {
	PgwCtrlFTEID *Fteid `form:"pgwCtrlFTEID,omitempty" json:"pgwCtrlFTEID,omitempty" xml:"pgwCtrlFTEID,omitempty"`
	PgwDataFTEID *Fteid `form:"pgwDataFTEID,omitempty" json:"pgwDataFTEID,omitempty" xml:"pgwDataFTEID,omitempty"`
	SgwCtrlFTEID *Fteid `form:"sgwCtrlFTEID,omitempty" json:"sgwCtrlFTEID,omitempty" xml:"sgwCtrlFTEID,omitempty"`
	SgwDataFTEID *Fteid `form:"sgwDataFTEID,omitempty" json:"sgwDataFTEID,omitempty" xml:"sgwDataFTEID,omitempty"`
}

// Validate validates the GtpSessionFTEIDs type instance.
func (ut *GtpSessionFTEIDs) Validate() (err error) {
	if ut.PgwCtrlFTEID != nil {
		if err2 := ut.PgwCtrlFTEID.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if ut.PgwDataFTEID != nil {
		if err2 := ut.PgwDataFTEID.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if ut.SgwCtrlFTEID != nil {
		if err2 := ut.SgwCtrlFTEID.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if ut.SgwDataFTEID != nil {
		if err2 := ut.SgwDataFTEID.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
