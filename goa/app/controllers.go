// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "gojiko api": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/craftone/gojiko/goa/design
// --out=$(GOPATH)/src/github.com/craftone/gojiko/goa
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// GtpsessionController is the controller interface for the Gtpsession actions.
type GtpsessionController interface {
	goa.Muxer
	Create(*CreateGtpsessionContext) error
	DeleteByIMSIandEBI(*DeleteByIMSIandEBIGtpsessionContext) error
	ShowByID(*ShowByIDGtpsessionContext) error
	ShowByIMSIandEBI(*ShowByIMSIandEBIGtpsessionContext) error
}

// MountGtpsessionController "mounts" a Gtpsession resource controller on the given service.
func MountGtpsessionController(service *goa.Service, ctrl GtpsessionController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateGtpsessionContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*CreateGtpsessionPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	service.Mux.Handle("POST", "/sgw/:sgwAddr/gtpsessions", ctrl.MuxHandler("create", h, unmarshalCreateGtpsessionPayload))
	service.LogInfo("mount", "ctrl", "Gtpsession", "action", "Create", "route", "POST /sgw/:sgwAddr/gtpsessions")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteByIMSIandEBIGtpsessionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.DeleteByIMSIandEBI(rctx)
	}
	service.Mux.Handle("DELETE", "/sgw/:sgwAddr/gtpsessions/imsi/:imsi/ebi/:ebi", ctrl.MuxHandler("deleteByIMSIandEBI", h, nil))
	service.LogInfo("mount", "ctrl", "Gtpsession", "action", "DeleteByIMSIandEBI", "route", "DELETE /sgw/:sgwAddr/gtpsessions/imsi/:imsi/ebi/:ebi")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowByIDGtpsessionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ShowByID(rctx)
	}
	service.Mux.Handle("GET", "/sgw/:sgwAddr/gtpsessions/id/:sid", ctrl.MuxHandler("showByID", h, nil))
	service.LogInfo("mount", "ctrl", "Gtpsession", "action", "ShowByID", "route", "GET /sgw/:sgwAddr/gtpsessions/id/:sid")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowByIMSIandEBIGtpsessionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.ShowByIMSIandEBI(rctx)
	}
	service.Mux.Handle("GET", "/sgw/:sgwAddr/gtpsessions/imsi/:imsi/ebi/:ebi", ctrl.MuxHandler("showByIMSIandEBI", h, nil))
	service.LogInfo("mount", "ctrl", "Gtpsession", "action", "ShowByIMSIandEBI", "route", "GET /sgw/:sgwAddr/gtpsessions/imsi/:imsi/ebi/:ebi")
}

// unmarshalCreateGtpsessionPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateGtpsessionPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &createGtpsessionPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	payload.Finalize()
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}

// UDPEchoFlowByIMSIandEBIController is the controller interface for the UDPEchoFlowByIMSIandEBI actions.
type UDPEchoFlowByIMSIandEBIController interface {
	goa.Muxer
	Create(*CreateUDPEchoFlowByIMSIandEBIContext) error
	Delete(*DeleteUDPEchoFlowByIMSIandEBIContext) error
	Show(*ShowUDPEchoFlowByIMSIandEBIContext) error
}

// MountUDPEchoFlowByIMSIandEBIController "mounts" a UDPEchoFlowByIMSIandEBI resource controller on the given service.
func MountUDPEchoFlowByIMSIandEBIController(service *goa.Service, ctrl UDPEchoFlowByIMSIandEBIController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCreateUDPEchoFlowByIMSIandEBIContext(ctx, req, service)
		if err != nil {
			return err
		}
		// Build the payload
		if rawPayload := goa.ContextRequest(ctx).Payload; rawPayload != nil {
			rctx.Payload = rawPayload.(*UDPEchoFlowPayload)
		} else {
			return goa.MissingPayloadError()
		}
		return ctrl.Create(rctx)
	}
	service.Mux.Handle("POST", "/sgw/:sgwAddr/gtpsessions/imsi/:imsi/ebi/:ebi/udp_echo_flow", ctrl.MuxHandler("create", h, unmarshalCreateUDPEchoFlowByIMSIandEBIPayload))
	service.LogInfo("mount", "ctrl", "UDPEchoFlowByIMSIandEBI", "action", "Create", "route", "POST /sgw/:sgwAddr/gtpsessions/imsi/:imsi/ebi/:ebi/udp_echo_flow")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewDeleteUDPEchoFlowByIMSIandEBIContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Delete(rctx)
	}
	service.Mux.Handle("DELETE", "/sgw/:sgwAddr/gtpsessions/imsi/:imsi/ebi/:ebi/udp_echo_flow", ctrl.MuxHandler("delete", h, nil))
	service.LogInfo("mount", "ctrl", "UDPEchoFlowByIMSIandEBI", "action", "Delete", "route", "DELETE /sgw/:sgwAddr/gtpsessions/imsi/:imsi/ebi/:ebi/udp_echo_flow")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewShowUDPEchoFlowByIMSIandEBIContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Show(rctx)
	}
	service.Mux.Handle("GET", "/sgw/:sgwAddr/gtpsessions/imsi/:imsi/ebi/:ebi/udp_echo_flow", ctrl.MuxHandler("show", h, nil))
	service.LogInfo("mount", "ctrl", "UDPEchoFlowByIMSIandEBI", "action", "Show", "route", "GET /sgw/:sgwAddr/gtpsessions/imsi/:imsi/ebi/:ebi/udp_echo_flow")
}

// unmarshalCreateUDPEchoFlowByIMSIandEBIPayload unmarshals the request body into the context request data Payload field.
func unmarshalCreateUDPEchoFlowByIMSIandEBIPayload(ctx context.Context, service *goa.Service, req *http.Request) error {
	payload := &udpEchoFlowPayload{}
	if err := service.DecodeRequest(req, payload); err != nil {
		return err
	}
	payload.Finalize()
	if err := payload.Validate(); err != nil {
		// Initialize payload with private data structure so it can be logged
		goa.ContextRequest(ctx).Payload = payload
		return err
	}
	goa.ContextRequest(ctx).Payload = payload.Publicize()
	return nil
}
