// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "gojiko api": CLI Commands
//
// Command:
// $ goagen
// --design=github.com/craftone/gojiko/goa/design
// --out=$(GOPATH)/src/github.com/craftone/gojiko/goa
// --regen=true
// --version=v1.3.0

package cli

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/craftone/gojiko/goa/client"
	"github.com/goadesign/goa"
	goaclient "github.com/goadesign/goa/client"
	uuid "github.com/goadesign/goa/uuid"
	"github.com/spf13/cobra"
	"log"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"
)

type (
	// CreateGtpsessionCommand is the command line data structure for the create action of gtpsession
	CreateGtpsessionCommand struct {
		Payload     string
		ContentType string
		// SGW GTPv2-C loopback address
		SgwAddr     string
		PrettyPrint bool
	}

	// ShowByIDGtpsessionCommand is the command line data structure for the showByID action of gtpsession
	ShowByIDGtpsessionCommand struct {
		// SGW GTPv2-C loopback address
		SgwAddr string
		// Session ID
		Sid         int
		PrettyPrint bool
	}

	// ShowByIMSIandEBIGtpsessionCommand is the command line data structure for the showByIMSIandEBI action of gtpsession
	ShowByIMSIandEBIGtpsessionCommand struct {
		// EPS Bearer ID
		Ebi  int
		Imsi string
		// SGW GTPv2-C loopback address
		SgwAddr     string
		PrettyPrint bool
	}

	// CreateUDPEchoFlowByimsIandebiCommand is the command line data structure for the create action of udpEchoFlowByIMSIandEBI
	CreateUDPEchoFlowByimsIandebiCommand struct {
		Payload     string
		ContentType string
		// EPS Bearer ID
		Ebi  int
		Imsi string
		// SGW GTPv2-C loopback address
		SgwAddr     string
		PrettyPrint bool
	}
)

// RegisterCommands registers the resource action CLI commands.
func RegisterCommands(app *cobra.Command, c *client.Client) {
	var command, sub *cobra.Command
	command = &cobra.Command{
		Use:   "create",
		Short: `create action`,
	}
	tmp1 := new(CreateGtpsessionCommand)
	sub = &cobra.Command{
		Use:   `gtpsession ["/sgw/SGWADDR/gtpsessions"]`,
		Short: ``,
		Long: `

Payload example:

{
   "apn": "example.com",
   "ebi": 5,
   "imsi": "440100123456780",
   "mcc": "440",
   "mei": "1212345612345612",
   "mnc": "10",
   "msisdn": "8101012345678"
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp1.Run(c, args) },
	}
	tmp1.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp1.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	tmp2 := new(CreateUDPEchoFlowByimsIandebiCommand)
	sub = &cobra.Command{
		Use:   `udp-echo-flow-byims-iandebi ["/sgw/SGWADDR/gtpsessions/imsi/IMSI/ebi/EBI/udp_echo_flow"]`,
		Short: ``,
		Long: `

Payload example:

{
   "destAddr": "93.108.70.217",
   "destPort": 7777,
   "recvPacketSize": 1460,
   "sendPacketSize": 1460,
   "sourcePort": 7777,
   "targetBps": 100000000,
   "tos": 0,
   "ttl": 255
}`,
		RunE: func(cmd *cobra.Command, args []string) error { return tmp2.Run(c, args) },
	}
	tmp2.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp2.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "show-byid",
		Short: `Show the gtp session by session ID`,
	}
	tmp3 := new(ShowByIDGtpsessionCommand)
	sub = &cobra.Command{
		Use:   `gtpsession ["/sgw/SGWADDR/gtpsessions/id/SID"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp3.Run(c, args) },
	}
	tmp3.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp3.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
	command = &cobra.Command{
		Use:   "show-byims-iandebi",
		Short: `Show the gtp session by IMSI and EBI`,
	}
	tmp4 := new(ShowByIMSIandEBIGtpsessionCommand)
	sub = &cobra.Command{
		Use:   `gtpsession ["/sgw/SGWADDR/gtpsessions/imsi/IMSI/ebi/EBI"]`,
		Short: ``,
		RunE:  func(cmd *cobra.Command, args []string) error { return tmp4.Run(c, args) },
	}
	tmp4.RegisterFlags(sub, c)
	sub.PersistentFlags().BoolVar(&tmp4.PrettyPrint, "pp", false, "Pretty print response body")
	command.AddCommand(sub)
	app.AddCommand(command)
}

func intFlagVal(name string, parsed int) *int {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func float64FlagVal(name string, parsed float64) *float64 {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func boolFlagVal(name string, parsed bool) *bool {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func stringFlagVal(name string, parsed string) *string {
	if hasFlag(name) {
		return &parsed
	}
	return nil
}

func hasFlag(name string) bool {
	for _, arg := range os.Args[1:] {
		if strings.HasPrefix(arg, "--"+name) {
			return true
		}
	}
	return false
}

func jsonVal(val string) (*interface{}, error) {
	var t interface{}
	err := json.Unmarshal([]byte(val), &t)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func jsonArray(ins []string) ([]interface{}, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []interface{}
	for _, id := range ins {
		val, err := jsonVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, val)
	}
	return vals, nil
}

func timeVal(val string) (*time.Time, error) {
	t, err := time.Parse(time.RFC3339, val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func timeArray(ins []string) ([]time.Time, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []time.Time
	for _, id := range ins {
		val, err := timeVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func uuidVal(val string) (*uuid.UUID, error) {
	t, err := uuid.FromString(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func uuidArray(ins []string) ([]uuid.UUID, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []uuid.UUID
	for _, id := range ins {
		val, err := uuidVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func float64Val(val string) (*float64, error) {
	t, err := strconv.ParseFloat(val, 64)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func float64Array(ins []string) ([]float64, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []float64
	for _, id := range ins {
		val, err := float64Val(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

func boolVal(val string) (*bool, error) {
	t, err := strconv.ParseBool(val)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func boolArray(ins []string) ([]bool, error) {
	if ins == nil {
		return nil, nil
	}
	var vals []bool
	for _, id := range ins {
		val, err := boolVal(id)
		if err != nil {
			return nil, err
		}
		vals = append(vals, *val)
	}
	return vals, nil
}

// Run makes the HTTP request corresponding to the CreateGtpsessionCommand command.
func (cmd *CreateGtpsessionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sgw/%v/gtpsessions", url.QueryEscape(cmd.SgwAddr))
	}
	var payload client.CreateGtpsessionPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateGtpsession(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateGtpsessionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	var sgwAddr string
	cc.Flags().StringVar(&cmd.SgwAddr, "sgwAddr", sgwAddr, `SGW GTPv2-C loopback address`)
}

// Run makes the HTTP request corresponding to the ShowByIDGtpsessionCommand command.
func (cmd *ShowByIDGtpsessionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sgw/%v/gtpsessions/id/%v", url.QueryEscape(cmd.SgwAddr), cmd.Sid)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowByIDGtpsession(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowByIDGtpsessionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	var sgwAddr string
	cc.Flags().StringVar(&cmd.SgwAddr, "sgwAddr", sgwAddr, `SGW GTPv2-C loopback address`)
	var sid int
	cc.Flags().IntVar(&cmd.Sid, "sid", sid, `Session ID`)
}

// Run makes the HTTP request corresponding to the ShowByIMSIandEBIGtpsessionCommand command.
func (cmd *ShowByIMSIandEBIGtpsessionCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sgw/%v/gtpsessions/imsi/%v/ebi/%v", url.QueryEscape(cmd.SgwAddr), url.QueryEscape(cmd.Imsi), cmd.Ebi)
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.ShowByIMSIandEBIGtpsession(ctx, path)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *ShowByIMSIandEBIGtpsessionCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().IntVar(&cmd.Ebi, "ebi", 5, `EPS Bearer ID`)
	var imsi string
	cc.Flags().StringVar(&cmd.Imsi, "imsi", imsi, ``)
	var sgwAddr string
	cc.Flags().StringVar(&cmd.SgwAddr, "sgwAddr", sgwAddr, `SGW GTPv2-C loopback address`)
}

// Run makes the HTTP request corresponding to the CreateUDPEchoFlowByimsIandebiCommand command.
func (cmd *CreateUDPEchoFlowByimsIandebiCommand) Run(c *client.Client, args []string) error {
	var path string
	if len(args) > 0 {
		path = args[0]
	} else {
		path = fmt.Sprintf("/sgw/%v/gtpsessions/imsi/%v/ebi/%v/udp_echo_flow", url.QueryEscape(cmd.SgwAddr), url.QueryEscape(cmd.Imsi), cmd.Ebi)
	}
	var payload client.UDPEchoFlowPayload
	if cmd.Payload != "" {
		err := json.Unmarshal([]byte(cmd.Payload), &payload)
		if err != nil {
			return fmt.Errorf("failed to deserialize payload: %s", err)
		}
	}
	logger := goa.NewLogger(log.New(os.Stderr, "", log.LstdFlags))
	ctx := goa.WithLogger(context.Background(), logger)
	resp, err := c.CreateUDPEchoFlowByIMSIandEBI(ctx, path, &payload, cmd.ContentType)
	if err != nil {
		goa.LogError(ctx, "failed", "err", err)
		return err
	}

	goaclient.HandleResponse(c.Client, resp, cmd.PrettyPrint)
	return nil
}

// RegisterFlags registers the command flags with the command line.
func (cmd *CreateUDPEchoFlowByimsIandebiCommand) RegisterFlags(cc *cobra.Command, c *client.Client) {
	cc.Flags().StringVar(&cmd.Payload, "payload", "", "Request body encoded in JSON")
	cc.Flags().StringVar(&cmd.ContentType, "content", "", "Request content type override, e.g. 'application/x-www-form-urlencoded'")
	cc.Flags().IntVar(&cmd.Ebi, "ebi", 5, `EPS Bearer ID`)
	var imsi string
	cc.Flags().StringVar(&cmd.Imsi, "imsi", imsi, ``)
	var sgwAddr string
	cc.Flags().StringVar(&cmd.SgwAddr, "sgwAddr", sgwAddr, `SGW GTPv2-C loopback address`)
}
