// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "gojiko api": udpEchoFlowByIMSIandEBI Resource Client
//
// Command:
// $ goagen
// --design=github.com/craftone/gojiko/goa/design
// --out=$(GOPATH)/src/github.com/craftone/gojiko/goa
// --version=v1.3.0

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateUDPEchoFlowByIMSIandEBIPath computes a request path to the create action of udpEchoFlowByIMSIandEBI.
func CreateUDPEchoFlowByIMSIandEBIPath(sgwAddr string, imsi string, ebi int) string {
	param0 := sgwAddr
	param1 := imsi
	param2 := strconv.Itoa(ebi)

	return fmt.Sprintf("/sgw/%s/gtpsessions/imsi/%s/ebi/%s/udp_echo_flow", param0, param1, param2)
}

// Start UDP ECHO flow by IMSI and EBI
func (c *Client) CreateUDPEchoFlowByIMSIandEBI(ctx context.Context, path string, payload *UDPEchoFlowPayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateUDPEchoFlowByIMSIandEBIRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateUDPEchoFlowByIMSIandEBIRequest create the request corresponding to the create action endpoint of the udpEchoFlowByIMSIandEBI resource.
func (c *Client) NewCreateUDPEchoFlowByIMSIandEBIRequest(ctx context.Context, path string, payload *UDPEchoFlowPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteUDPEchoFlowByIMSIandEBIPath computes a request path to the delete action of udpEchoFlowByIMSIandEBI.
func DeleteUDPEchoFlowByIMSIandEBIPath(sgwAddr string, imsi string, ebi int) string {
	param0 := sgwAddr
	param1 := imsi
	param2 := strconv.Itoa(ebi)

	return fmt.Sprintf("/sgw/%s/gtpsessions/imsi/%s/ebi/%s/udp_echo_flow", param0, param1, param2)
}

// End UDP ECHO flow by IMSI and EBI
func (c *Client) DeleteUDPEchoFlowByIMSIandEBI(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteUDPEchoFlowByIMSIandEBIRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteUDPEchoFlowByIMSIandEBIRequest create the request corresponding to the delete action endpoint of the udpEchoFlowByIMSIandEBI resource.
func (c *Client) NewDeleteUDPEchoFlowByIMSIandEBIRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowUDPEchoFlowByIMSIandEBIPath computes a request path to the show action of udpEchoFlowByIMSIandEBI.
func ShowUDPEchoFlowByIMSIandEBIPath(sgwAddr string, imsi string, ebi int) string {
	param0 := sgwAddr
	param1 := imsi
	param2 := strconv.Itoa(ebi)

	return fmt.Sprintf("/sgw/%s/gtpsessions/imsi/%s/ebi/%s/udp_echo_flow", param0, param1, param2)
}

// Show UDP ECHO flow by IMSI and EBI. The flow is Current flow or last processed flow.
func (c *Client) ShowUDPEchoFlowByIMSIandEBI(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowUDPEchoFlowByIMSIandEBIRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowUDPEchoFlowByIMSIandEBIRequest create the request corresponding to the show action endpoint of the udpEchoFlowByIMSIandEBI resource.
func (c *Client) NewShowUDPEchoFlowByIMSIandEBIRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
