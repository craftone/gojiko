@startuml gojiko

'''''''''''''''''''
' S/PGW part
'''''''''''''''''''

class AbsSPgw {
  UDPAddr
  Recovery byte

  fromReceiver chan UDPpacket
  toSender chan UDPpacket
  conn *UDPConn

  NextTeid() TEID
}
note left
・複数のAPNで
  同一IPアドレスが
  使われない前提
end note


'''''''''''''''''''
' SGW part
'''''''''''''''''''

class SgwCtrlRepo {
  sgwCtrls map[UDPAddr]*SgwCtrlRepo
  Get(UDPAddr) *SgwCtrl
  Add(*SgwCtrl) error
  Remove(*SgwCtrl) error
}
SgwCtrlRepo -> SgwCtrl
note left
  デフォルトで127.0.0.1:2123 を持つ
end note

class SgwCtrl {
  map [UDPaddr]OpPgwCtrl
  CreateSession(pgwUDPAddr, IMSI, etc.) SessionID
}

class SgwData {
  sendMsg()
}
SgwCtrl *-> SgwData

AbsSPgw <|-- SgwCtrl
AbsSPgw <|-- SgwData

class SgwDataSender <<GoRoutine>>
class SgwDataReceiver <<GoRoutine>>

SgwCtrl *--> SgwCtrlSender
SgwCtrl *--> SgwCtrlReceiver


class SgwCtrlSender <<GoRoutine>> {
  SendChan chan UDPpacket
}

class SgwCtrlReceiver <<GoRoutine>>

SgwData *--> SgwDataSender
SgwData *--> SgwDataReceiver



SgwCtrl ..> GtpSessionRoutine : chan CMD

'''''''''''''''''''
' OpPgw part
'''''''''''''''''''

class OpSPgw {
  numOfSessions int
  fromReceiver chan UDPpacket
}
SgwCtrl *--> "*" OpSPgw

class SgwEchoCMgr <<GoRoutine>>
class SgwEchoUMgr <<GoRoutine>>
OpSPgw *--> "1" SgwEchoCMgr
SgwData *--> SgwEchoUMgr

SgwEchoCMgr ..> SgwCtrlSender : send packets
SgwCtrlReceiver .> SgwEchoCMgr : received packets

'''''''''''''''''''
' GtpSession part
'''''''''''''''''''

class GtpSessionsRepo {
  newSession(SgwCtrl, SgwCtrlTEID, SgwDataTEID, \n\
         PgwCtrlAddr, IMSI, etc) (SessionID, error)
  FindCtrlChan(SgwCtrl, )
  FindSgwCtrl(UDPAddr, SgwCtrlTeid) (GtpSessionID, bool)
  FindSgwData(UDPAddr, SgwDataTeid) (GtpSessionID, bool)
}
GtpSessionsRepo ..> GtpSession : Create

class GtpSession {
  mtx Mutex
  sessionId         uint32
  status  // Init, Sended, Established,
  ctrlChan          chan GtpSesCmd
  sgwCtrlSenderChan chan<- UDPpacket

  PgwCtrlFteid FTEID
  PgwDataFteid FTEID
  SgwCFteid FTEID
  SgwUFeession chan
}
GtpSession *--> "1" GtpSessionRoutine
GtpSessionRoutine ..> SgwCtrlSender : send packets

class GtpSessionRoutine <<GoRoutine>> {
  data *GtpSession
}
note left
  リトライ制御は
  ここで実施
end note

class Flow <<GoRoutine>>


GtpSession *--> "*" Flow
Flow ..> SgwData


SgwCtrlReceiver ..> GtpSessionRoutine : received packets


'''''''''''''''''''
' APN part
'''''''''''''''''''
class ApnRepo {
  apnMap [string]*Apn

  Post(*Apn)
  Find(networkID, mcc, mnc)
}
note right
  apnMap's key is APN's fullString
end note

class Apn {
  networkID string
  operatorID string
  fullString string
  ips []net.IP
  curIdx
}
note right
  fullString := networkID "." operatorID
end note
ApnRepo *--> Apn : Post & Find

@enduml
