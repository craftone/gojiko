@startuml

'''''''''''''''''''
' S/PGW part
'''''''''''''''''''

class AbsSPgw {
  UDPAddr
  Recovery byte

  fromReceiver chan []byte
  toSender chan []byte
  opSPgwMap map[UDPAddr]OpSPgw
  opSPgwSessionCnt map[UDPAddr]int

  NextTeid() TEID
}
note left
・複数のAPNで
  同一IPアドレスが
  使われない前提
end note


'''''''''''''''''''''''
' Opposite S/PGW Part
'''''''''''''''''''''''

class OpSpgwsRepo {
  map[UDPAddr]*AbsSPgw
  CountUp(UDPAddr, Recovery)
  CountDown(UDPAddr, Recovery)
  Find(UDPAddr) *AbsSPgw
  Delete(UDPAddr)
}

class OpSpgwCtrl {
  opSpgwData *OpSpgwData
}
AbsSPgw <|-- OpSpgwCtrl

class OpSpgwCtrlEchoMgr <<GoRoutine>> {
  spgwCtrlSendChan
  spgwCtrlRecvChan
}
OpSpgwCtrl *-- OpSpgwCtrlEchoMgr

class OpSpgwData {
  opSpgwCtrl *OpSpgwCtrl
}
AbsSPgw <|-- OpSpgwData
OpSpgwCtrl *-- OpSpgwData

class OpSpgwDataEchoMgr <<GoRoutine>> {
  spgwDataSendChan
  spgwDataRecvChan
}
OpSpgwData *-- OpSpgwDataEchoMgr

OpSpgwsRepo ..> OpSpgwCtrl : CRUD
OpSpgwsRepo ..> OpSpgwData : CRUD




'''''''''''''''''''
' SGW part
'''''''''''''''''''

class SgwCtrl {
  CreateSession(pgwUDPAddr, IMSI, etc.) SessionID
  countUp(UDPAddr)
  countDown(UDPAddr)
}

class SgwData {
  sendMsg()
}
SgwCtrl *-- SgwData

AbsSPgw <|-- SgwCtrl
AbsSPgw <|-- SgwData

class SgwDataSender <<GoRoutine>>
class SgwDataReceiver <<GoRoutine>>

SgwCtrl *-- SgwCtrlSender
SgwCtrl *-- SgwCtrlReceiver


class SgwCtrlSender <<GoRoutine>>
class SgwCtrlReceiver <<GoRoutine>>

SgwData *-- SgwDataSender
SgwData *-- SgwDataReceiver

class SgwEchoCMgr <<GoRoutine>>
class SgwEchoUMgr <<GoRoutine>>

SgwCtrl *-- SgwEchoCMgr
SgwData *-- SgwEchoUMgr

SgwCtrl ..> GtpSession : chan CMD

'''''''''''''''''''
' GtpSession part
'''''''''''''''''''

class GtpSessionsRepo {
  Create(SgwCtrl, SgwCtrlTEID, SgwDataTEID, \n\
         VpgwCtrl, IMSI, etc) (SessionID, error)
  FindCtrlChan(SgwCtrl, )
  FindSgwCtrl(UDPAddr, SgwCtrlTeid) (GtpSessionID, bool)
  FindSgwData(UDPAddr, SgwDataTeid) (GtpSessionID, bool)
}
GtpSessionsRepo ..> GtpSession : Create

class GtpSession <<GoRoutine>> {
  id            uint32
  status  // Init, Sended, Established,
  ctrlChan          chan GtpSesCmd
  sgwCtrlSenderChan chan<- []byte

  PgwCtrlFteid FTEID
  PgwDataFteid FTEID
  SgwCFteid FTEID
  SgwUFeession chan
}
note right
  リトライ制御は
  ここで実施
end note

class Flow <<GoRoutine>>


GtpSession *-- "*" Flow

Flow ..> SgwData


SgwCtrlReceiver ..> GtpSession : received packet

@enduml
